{"version":3,"file":"progress-bar.d.ts","sources":["progress-bar.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, InjectionToken } from '@angular/core';\nimport { CanColor } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatProgressBarBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\nexport declare const _MatProgressBarMixinBase: (new (...args: any[]) => CanColor) & typeof MatProgressBarBase;\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport declare const MAT_PROGRESS_BAR_LOCATION: InjectionToken<MatProgressBarLocation>;\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n    pathname: string;\n}\n/** @docs-private */\nexport declare function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation;\n/**\n * `<mat-progress-bar>` component.\n */\nexport declare class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n    _elementRef: ElementRef;\n    _animationMode: string | undefined;\n    constructor(_elementRef: ElementRef, _animationMode?: string | undefined, \n        /**\n         * @deprecated `location` parameter to be made required.\n         * @breaking-change 8.0.0\n         */\n        location?: MatProgressBarLocation);\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n    value: number;\n    private _value;\n    /** Buffer value of the progress bar. Defaults to zero. */\n    bufferValue: number;\n    private _bufferValue;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    /** ID of the progress bar. */\n    progressbarId: string;\n    /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n    _rectangleFillValue: string;\n    /** Gets the current transform value for the progress bar's primary indicator. */\n    _primaryTransform(): {\n        transform: string;\n    };\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     */\n    _bufferTransform(): {\n        transform: string;\n    } | undefined;\n}\n"]}